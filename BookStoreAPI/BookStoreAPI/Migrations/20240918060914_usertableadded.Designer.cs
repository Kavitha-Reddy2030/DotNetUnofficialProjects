// <auto-generated />
using System;
using BookStoreAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStoreAPI.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20240918060914_usertableadded")]
    partial class usertableadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cab78d0-c547-47c3-b450-6dfbcb647fc1"),
                            Bio = "British author, best known for the Harry Potter series.",
                            Birthdate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "J.K. Rowling",
                            ProfileImageUrl = "https://example.com/images/jk_rowling.jpg"
                        },
                        new
                        {
                            Id = new Guid("ddf3ed94-999b-46d1-b978-48b585d4b1b4"),
                            Bio = "American author, known for the 'A Song of Ice and Fire' series.",
                            Birthdate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George R.R. Martin",
                            ProfileImageUrl = "https://example.com/images/george_rr_martin.jpg"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookSizeId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fad1615-3190-4fa4-9ec2-cf0a8f7dcef1"),
                            AuthorId = new Guid("9cab78d0-c547-47c3-b450-6dfbcb647fc1"),
                            BookSizeId = new Guid("fb587b8f-9419-4a30-a689-a605456512f1"),
                            CoverImageUrl = "https://example.com/images/harry_potter_1.jpg",
                            Description = "First book in the Harry Potter series.",
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("9d49e5d8-9a0b-4934-808d-9372df3a320f"),
                            AuthorId = new Guid("ddf3ed94-999b-46d1-b978-48b585d4b1b4"),
                            BookSizeId = new Guid("b4ee2a33-ac64-4443-bf6f-195fe6d4a38c"),
                            CoverImageUrl = "https://example.com/images/game_of_thrones.jpg",
                            Description = "First book in the A Song of Ice and Fire series.",
                            PublicationDate = new DateTime(1996, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Game of Thrones"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.BookSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookSizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13b39c6a-8e52-43cd-8207-6fdc11b39e48"),
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("fb587b8f-9419-4a30-a689-a605456512f1"),
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("b4ee2a33-ac64-4443-bf6f-195fe6d4a38c"),
                            Size = "Large"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed4e4b1b-8166-4f6c-8d4e-def2ecf56270"),
                            PasswordHash = "admin123",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("159830c3-3722-41ef-aa54-6b3eee83977f"),
                            PasswordHash = "user123",
                            Role = "User",
                            Username = "user1"
                        },
                        new
                        {
                            Id = new Guid("2b16f919-1421-461d-87ab-83bd2cab8ecc"),
                            PasswordHash = "user234",
                            Role = "User",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Book", b =>
                {
                    b.HasOne("BookStoreAPI.Models.Domain.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreAPI.Models.Domain.BookSize", "BookSize")
                        .WithMany()
                        .HasForeignKey("BookSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookSize");
                });
#pragma warning restore 612, 618
        }
    }
}
