// <auto-generated />
using System;
using BookStoreAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStoreAPI.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20240918063445_seeddata")]
    partial class seeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("677a3bef-de3a-4793-a29e-11c8c67558be"),
                            Bio = "Bio of New Author 1.",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Author 1",
                            ProfileImageUrl = "https://example.com/images/new_author_1.jpg"
                        },
                        new
                        {
                            Id = new Guid("f1c15e2c-d7e1-4749-93de-f5dfc70c8683"),
                            Bio = "Bio of New Author 2.",
                            Birthdate = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Author 2",
                            ProfileImageUrl = "https://example.com/images/new_author_2.jpg"
                        },
                        new
                        {
                            Id = new Guid("30a4c9aa-31cb-4778-b689-d06f5861e29d"),
                            Bio = "British author, best known for the Harry Potter series.",
                            Birthdate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "J.K. Rowling",
                            ProfileImageUrl = "https://example.com/images/jk_rowling.jpg"
                        },
                        new
                        {
                            Id = new Guid("86000898-3458-4b01-af56-e0eb847e1df7"),
                            Bio = "American author, known for the 'A Song of Ice and Fire' series.",
                            Birthdate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George R.R. Martin",
                            ProfileImageUrl = "https://example.com/images/george_rr_martin.jpg"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookSizeId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("062ec03e-b980-40d2-83a2-7fe2e887449e"),
                            AuthorId = new Guid("677a3bef-de3a-4793-a29e-11c8c67558be"),
                            BookSizeId = new Guid("3ddbecc2-7aca-41b5-8546-12beb52b558d"),
                            CoverImageUrl = "https://example.com/images/new_book_1.jpg",
                            Description = "Description for New Book 1.",
                            PublicationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "New Book 1"
                        },
                        new
                        {
                            Id = new Guid("c9b2113a-0e0e-440a-9291-20f2ab5e61e6"),
                            AuthorId = new Guid("f1c15e2c-d7e1-4749-93de-f5dfc70c8683"),
                            BookSizeId = new Guid("f943cdf3-03ef-41fc-8132-6a6809089ecd"),
                            CoverImageUrl = "https://example.com/images/new_book_2.jpg",
                            Description = "Description for New Book 2.",
                            PublicationDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "New Book 2"
                        },
                        new
                        {
                            Id = new Guid("63673bd3-4550-43ef-ac3a-812a7ad35ce9"),
                            AuthorId = new Guid("30a4c9aa-31cb-4778-b689-d06f5861e29d"),
                            BookSizeId = new Guid("38d061fc-cb18-4cc4-95d3-4e3bd808dd6d"),
                            CoverImageUrl = "https://example.com/images/harry_potter_1.jpg",
                            Description = "First book in the Harry Potter series.",
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("a7bda68d-7372-4d81-a6a7-fc530c1563b5"),
                            AuthorId = new Guid("86000898-3458-4b01-af56-e0eb847e1df7"),
                            BookSizeId = new Guid("8eb8ce4c-0bde-4eac-8d3c-e9e60585d211"),
                            CoverImageUrl = "https://example.com/images/game_of_thrones.jpg",
                            Description = "First book in the A Song of Ice and Fire series.",
                            PublicationDate = new DateTime(1996, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Game of Thrones"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.BookSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookSizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ddbecc2-7aca-41b5-8546-12beb52b558d"),
                            Size = "Extra Small"
                        },
                        new
                        {
                            Id = new Guid("f943cdf3-03ef-41fc-8132-6a6809089ecd"),
                            Size = "Extra Large"
                        },
                        new
                        {
                            Id = new Guid("7c5d0e98-5e6d-44ea-8142-40d48eb7c4dc"),
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("38d061fc-cb18-4cc4-95d3-4e3bd808dd6d"),
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("8eb8ce4c-0bde-4eac-8d3c-e9e60585d211"),
                            Size = "Large"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Book", b =>
                {
                    b.HasOne("BookStoreAPI.Models.Domain.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreAPI.Models.Domain.BookSize", "BookSize")
                        .WithMany()
                        .HasForeignKey("BookSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookSize");
                });
#pragma warning restore 612, 618
        }
    }
}
