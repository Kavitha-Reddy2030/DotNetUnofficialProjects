// <auto-generated />
using System;
using BookStoreAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStoreAPI.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    partial class BookStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7937cb2a-fb69-4903-869e-5d912588a70e"),
                            Bio = "Bio of New Author 1.",
                            Birthdate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Author 1",
                            ProfileImageUrl = "https://example.com/images/new_author_1.jpg"
                        },
                        new
                        {
                            Id = new Guid("1adc85e9-0f4c-4d30-a932-66ff804a192e"),
                            Bio = "Bio of New Author 2.",
                            Birthdate = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Author 2",
                            ProfileImageUrl = "https://example.com/images/new_author_2.jpg"
                        },
                        new
                        {
                            Id = new Guid("0525fcfb-dffb-401b-9d13-da22d9278558"),
                            Bio = "British author, best known for the Harry Potter series.",
                            Birthdate = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "J.K. Rowling",
                            ProfileImageUrl = "https://example.com/images/jk_rowling.jpg"
                        },
                        new
                        {
                            Id = new Guid("8b6ec3e9-e872-469a-8123-8cae070def93"),
                            Bio = "American author, known for the 'A Song of Ice and Fire' series.",
                            Birthdate = new DateTime(1948, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George R.R. Martin",
                            ProfileImageUrl = "https://example.com/images/george_rr_martin.jpg"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookSizeId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c906155-1b56-421c-bcac-f79ff6262cd8"),
                            AuthorId = new Guid("7937cb2a-fb69-4903-869e-5d912588a70e"),
                            BookSizeId = new Guid("d2c35f24-4ac8-42f4-9842-e8e5fff7bbc6"),
                            CoverImageUrl = "https://example.com/images/new_book_1.jpg",
                            Description = "Description for New Book 1.",
                            PublicationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "New Book 1"
                        },
                        new
                        {
                            Id = new Guid("5a731842-30d3-4e49-bc0b-9ffba5a98dc4"),
                            AuthorId = new Guid("1adc85e9-0f4c-4d30-a932-66ff804a192e"),
                            BookSizeId = new Guid("a831598b-6041-4f5d-acfe-e41e4ac8bc37"),
                            CoverImageUrl = "https://example.com/images/new_book_2.jpg",
                            Description = "Description for New Book 2.",
                            PublicationDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "New Book 2"
                        },
                        new
                        {
                            Id = new Guid("e059fd04-b67d-4471-822a-2aa161f24e25"),
                            AuthorId = new Guid("0525fcfb-dffb-401b-9d13-da22d9278558"),
                            BookSizeId = new Guid("a77f3206-c361-4b52-a3c7-9dba2253b9a2"),
                            CoverImageUrl = "https://example.com/images/harry_potter_1.jpg",
                            Description = "First book in the Harry Potter series.",
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("3e85e9dc-b567-4527-b85f-7cdb63ed1001"),
                            AuthorId = new Guid("8b6ec3e9-e872-469a-8123-8cae070def93"),
                            BookSizeId = new Guid("1fa3e269-98f4-4d9b-a7d7-cbf0760d378b"),
                            CoverImageUrl = "https://example.com/images/game_of_thrones.jpg",
                            Description = "First book in the A Song of Ice and Fire series.",
                            PublicationDate = new DateTime(1996, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Game of Thrones"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.BookSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookSizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2c35f24-4ac8-42f4-9842-e8e5fff7bbc6"),
                            Size = "Extra Small"
                        },
                        new
                        {
                            Id = new Guid("a831598b-6041-4f5d-acfe-e41e4ac8bc37"),
                            Size = "Extra Large"
                        },
                        new
                        {
                            Id = new Guid("85b8d099-09ac-485b-9984-55aeb9284bb9"),
                            Size = "Small"
                        },
                        new
                        {
                            Id = new Guid("a77f3206-c361-4b52-a3c7-9dba2253b9a2"),
                            Size = "Medium"
                        },
                        new
                        {
                            Id = new Guid("1fa3e269-98f4-4d9b-a7d7-cbf0760d378b"),
                            Size = "Large"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a937aabe-1a08-4815-b64d-bba9d2ce6f7b"),
                            PasswordHash = "adminpass",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("806d4961-9d7a-41c0-9e58-86033436ae18"),
                            PasswordHash = "userpass",
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("BookStoreAPI.Models.Domain.Book", b =>
                {
                    b.HasOne("BookStoreAPI.Models.Domain.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStoreAPI.Models.Domain.BookSize", "BookSize")
                        .WithMany()
                        .HasForeignKey("BookSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookSize");
                });
#pragma warning restore 612, 618
        }
    }
}
